{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","SORT_DEFAULT","sortValue","setSortValue","isReverse","setValueReverse","getNewList","list","valueReset","sort","val1","val2","SORT_NAME","localeCompare","SORT_LENGTH","length","reverse","getNewSortList","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,iBAAAA,E,sBAAAA,M,KA6BE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,cAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAqCH,oBAAS,GAA9C,mBAAOI,EAAP,KAAkBC,EAAlB,KACMC,EA1BR,SAAwBC,EAAeL,EAAkBE,GACvD,IAAMI,EAAU,YAAOD,GAmBvB,OAjBIL,GACFM,EAAWC,MAAK,SAACC,EAAMC,GACrB,OAAQT,GACN,KAAKL,EAAOe,UACV,OAAOF,EAAKG,cAAcF,GAC5B,KAAKd,EAAOiB,YACV,OAAOJ,EAAKK,OAASJ,EAAKI,OAC5B,QACE,OAAO,MAKXX,GACFI,EAAWQ,UAGNR,EAMYS,CAAenB,EAAiBI,EAAWE,GAmB9D,OACE,qBAAKc,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYlB,IAAcL,EAAOe,WACnC,kBAEFS,QAvBmB,WAC3BlB,EAAaN,EAAOe,YAgBd,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYlB,IAAcL,EAAOiB,aACnC,qBAEFO,QA9BqB,WAC7BlB,EAAaN,EAAOiB,cAuBd,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,CAAE,YAAahB,GACf,qBAEFiB,QAjDW,WACnBhB,GAAgB,SAAAiB,GAAI,OAAKA,MA0CnB,sBAWElB,GAA2B,KAAdF,IACb,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA9CQ,WAClBlB,EAAaN,EAAOI,cACpBI,GAAgB,IAyCR,sBAUJ,oBAAIa,UAAU,WAAd,SACGZ,EAAWiB,KAAI,SAAAC,GAAI,OAClB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCpHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.030437b2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  SORT_DEFAULT = '',\n  SORT_NAME = 'name',\n  SORT_LENGTH = 'lenght',\n}\n\nfunction getNewSortList(list:string[], sortValue:string, isReverse:boolean) {\n  const valueReset = [...list];\n\n  if (sortValue) {\n    valueReset.sort((val1, val2) => {\n      switch (sortValue) {\n        case SortBy.SORT_NAME:\n          return val1.localeCompare(val2);\n        case SortBy.SORT_LENGTH:\n          return val1.length - val2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    valueReset.reverse();\n  }\n\n  return valueReset;\n}\n\nexport const App: React.FC = () => {\n  const [sortValue, setSortValue] = useState(SortBy.SORT_DEFAULT);\n  const [isReverse, setValueReverse] = useState(false);\n  const getNewList = getNewSortList(goodsFromServer, sortValue, isReverse);\n\n  const reverseValue = () => {\n    setValueReverse(prev => !prev);\n  };\n\n  const handlerClickSortName = () => {\n    setSortValue(SortBy.SORT_NAME);\n  };\n\n  const handlerClickSortLength = () => {\n    setSortValue(SortBy.SORT_LENGTH);\n  };\n\n  const resetValues = () => {\n    setSortValue(SortBy.SORT_DEFAULT);\n    setValueReverse(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={cn(\n              { 'is-light': sortValue !== SortBy.SORT_NAME },\n              'button is-info',\n            )}\n            onClick={handlerClickSortName}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn(\n              { 'is-light': sortValue !== SortBy.SORT_LENGTH },\n              'button is-success',\n            )}\n            onClick={handlerClickSortLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn(\n              { 'is-light': !isReverse },\n              'button is-warning',\n            )}\n            onClick={reverseValue}\n          >\n            Reverse\n          </button>\n\n          {(isReverse || sortValue !== '') && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetValues}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul className=\"GoodList\">\n          {getNewList.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}